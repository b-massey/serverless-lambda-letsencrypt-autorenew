# letsencrypt-autorenew
#

service: letsencrypt-autorenew

custom:
  stages:
    - dev
    - test
    - prod  
  bucket: 
    dev: letsencrypt-acme-dev
    test: letsencrypt-acme-test
    prod: letsencrypt-acme-prod
  R53_Domain: acme.example.com

  pythonRequirements:
    dockerizePip: true

Resources:
  ACMES3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ${self:custom.bucket.${self:provider.stage}}

provider:
  name: aws
  stackTags: 
    env : ${self:provider.stage}
    app : acme
    cost-centre : System
  runtime: python2.7
  timeout: 300 

  stage:  ${opt:stage, 'dev'}
  region: eu-west-2

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
        - "s3:PutObject"
        - "s3:GetObject"
      Resource: "arn:aws:s3:::${self:custom.bucket.${self:provider.stage}}/*"
    - Effect: "Allow"
      Action:        
        - "route53:GetChange"
        - "route53:ListHostedZones"
        - "route53:ListResourceRecordSets"
        - "route53:ChangeResourceRecordSets"
      Resource: "*"

functions:
  autorenew:
    handler: letsencrypt_autorenew.letsencrypt_handler
    name: ${self:service.name}-${self:provider.stage}
    schedule: 
      #rate: cron(30 1 * * ? *)
      rate: rate(10 minutes)
      enabled: false
    
    environment:
      ENVIRONMENT: ${self:provider.stage}
      S3_BUCKET: ${self:custom.bucket.${self:provider.stage}}
      S3_REGION: ${self:provider.region}
      R53_DOMAIN: ${self:custom.R53_Domain}
      DOMAIN_CONFIG: "letsencrypt-domains-${self:provider.stage}.yml"

plugins:
  - serverless-python-requirements
